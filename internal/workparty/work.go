package workparty

import (
	"context"
	"errors"
	"fmt"
	"github.com/ansel1/merry"
	"github.com/fpawel/atool/internal/config"
	"github.com/fpawel/atool/internal/data"
	"github.com/fpawel/atool/internal/gui"
	"github.com/fpawel/atool/internal/pkg/comports"
	"github.com/fpawel/atool/internal/pkg/intrng"
	"github.com/fpawel/atool/internal/thriftgen/apitypes"
	"github.com/fpawel/atool/internal/workgui"
	"github.com/fpawel/comm"
	"github.com/fpawel/comm/modbus"
	"github.com/powerman/structlog"
	"time"
)

func Delay(log *structlog.Logger, ctx context.Context, duration time.Duration, name string) error {
	// –∏–∑–º–µ—Ä–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ü–µ—Å–µ –æ–ø—Ä–æ—Å–∞ –ø—Ä–∏–±–æ—Ä–æ–≤ –≤–æ –≤—Ä–µ–º—è –¥–∞–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
	ms := new(data.MeasurementCache)
	defer ms.Save()

	errorsOccurred := make(ErrorsOccurred)

	return workgui.Delay(log, ctx, duration, name, func(_ *structlog.Logger, ctx context.Context) error {
		return ReadProductsParams(log, ctx, ms, errorsOccurred)
	})
}

func RunInterrogate(log comm.Logger, appCtx context.Context) error {
	return workgui.RunWork(log, appCtx, "üì§ –æ–ø—Ä–æ—Å –ø—Ä–∏–±–æ—Ä–æ–≤", func(log *structlog.Logger, ctx context.Context) error {
		ms := new(data.MeasurementCache)
		defer ms.Save()
		errorsOccurred := make(ErrorsOccurred)
		for {
			if err := ReadProductsParams(log, ctx, ms, errorsOccurred); err != nil {
				if merry.Is(err, context.Canceled) {
					return nil
				}
				return err
			}
		}
	})
}

func RunReadAllCoefficients(log comm.Logger, appCtx context.Context) error {

	return workgui.RunWork(log, appCtx, "üì§ —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤", func(log *structlog.Logger, ctx context.Context) error {
		errs := make(ErrorsOccurred)
		err := ProcessEachActiveProduct(log, errs, func(p Product) error {
			return p.readAllCoefficients(log, ctx)
		})
		if err != nil {
			return err
		}
		if len(errs) > 0 {
			return errors.New("–Ω–µ –≤—Å–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å—á–∏—Ç–∞–Ω—ã")
		}
		return nil
	})
}

func RunWriteAllCoefficients(log comm.Logger, appCtx context.Context, in []*apitypes.ProductCoefficientValue) error {

	return workgui.RunWork(log, appCtx, "–∑–∞–ø–∏—Å—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤", func(log *structlog.Logger, ctx context.Context) error {
		return writeAllCoefficients(log, ctx, in)
	})
}

func RunRawCommand(log comm.Logger, appCtx context.Context, c modbus.ProtoCmd, b []byte) {
	what := fmt.Sprintf("üì• –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã %X(% X)", c, b)
	workgui.RunTask(log, what, func() error {
		err := ProcessEachActiveProduct(log, nil, func(p Product) error {
			_, err := modbus.Request{
				Addr:     p.Addr,
				ProtoCmd: c,
				Data:     b,
			}.GetResponse(log, appCtx, p.Comm())
			if err != nil {
				return merry.Prepend(err, what)
			}
			workgui.NotifyInfo(log, fmt.Sprintf("%s %s - —É—Å–ø–µ—à–Ω–æ", p, what))
			return nil
		})
		if err != nil {
			return err
		}
		return nil
	})
}

func RunSetNetAddr(log comm.Logger, appCtx context.Context, productID int64, notifyComm func(comm.Info)) error {
	var p data.Product
	err := data.DB.Get(&p, `SELECT * FROM product WHERE product_id=?`, productID)
	if err != nil {
		return err
	}

	party, err := data.GetCurrentParty()
	if err != nil {
		return err
	}

	device, f := config.Get().Hardware[party.DeviceType]
	if !f {
		return merry.Errorf("%s: –Ω–µ –∑–∞–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∏–ø–∞ –ø—Ä–∏–±–æ—Ä–∞ %s", p, party.DeviceType)
	}

	workProduct := Product{
		Product: p,
		Device:  device,
		Party:   party,
	}

	what := fmt.Sprintf("%s: –∑–∞–ø–∏—Å—å —Å–µ—Ç–µ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ %d", workProduct, p.Addr)
	return workgui.RunWork(log, appCtx, what, func(log comm.Logger, ctx context.Context) error {
		return workgui.WithNotifyResult(log, what, func() error {
			comPort := comports.GetComport(p.Comport, device.Baud)
			if err := comPort.Open(); err != nil {
				return err
			}
			r := modbus.RequestWrite32{
				Addr:      0,
				ProtoCmd:  0x10,
				DeviceCmd: device.NetAddr.Cmd,
				Format:    device.NetAddr.Format,
				Value:     float64(p.Addr),
			}
			if _, err := comPort.Write(r.Request().Bytes()); err != nil {
				return err
			}
			notifyComm(comm.Info{
				Request: r.Request().Bytes(),
				Port:    p.Comport,
			})
			pause(ctx.Done(), time.Second)
			_, err := modbus.RequestRead3{
				Addr:           p.Addr,
				FirstRegister:  0,
				RegistersCount: 2,
			}.GetResponse(log, ctx, getCommProduct(p.Comport, device))
			return err
		})
	})
}

func RunSearchProducts(log comm.Logger, appCtx context.Context, comportName string) error {

	return workgui.RunWork(log, appCtx, "–ø–æ–∏—Å–∫ –ø—Ä–∏–±–æ—Ä–æ–≤ —Å–µ—Ç–∏", func(log *structlog.Logger, ctx context.Context) error {
		party, err := data.GetCurrentParty()
		if err != nil {
			return err
		}
		device, err := config.Get().Hardware.GetDevice(party.DeviceType)
		if err != nil {
			return err
		}

		if len(device.Params) == 0 {
			return merry.Errorf("–Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %q", party.DeviceType)
		}

		cm := comm.New(comports.GetComport(comportName, device.Baud), comm.Config{
			TimeoutGetResponse: 500 * time.Millisecond,
			TimeoutEndResponse: 50 * time.Millisecond,
		})

		ans, notAns := make(intrng.Bytes), make(intrng.Bytes)
		param := device.Params[0]

		go gui.NotifyProgressShow(127, "–º–æ–¥–±–∞—Å: —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏")
		defer func() {
			go gui.NotifyProgressHide()
		}()

		for addr := modbus.Addr(1); addr <= 127; addr++ {
			go gui.NotifyProgress(int(addr), fmt.Sprintf("MODBUS: —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏: %d, –æ—Ç–≤–µ—Ç–∏–ª–∏ [%s], –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ [%s]",
				addr, ans.Format(), notAns.Format()))
			_, err := modbus.Read3Value(log, ctx, cm, addr, modbus.Var(param.ParamAddr), param.Format)
			if merry.Is(err, context.DeadlineExceeded) || merry.Is(err, modbus.Err) {
				notAns.Push(byte(addr))
				continue
			}
			if err != nil {
				return err
			}
			ans.Push(byte(addr))
		}

		if len(ans) == 0 {
			go gui.NotifyStatus(gui.Status{
				Text:       "—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏: –ø—Ä–∏–±–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
				Ok:         true,
				PopupLevel: gui.LWarn,
			})
			return nil
		}

		if err := data.SetNewCurrentParty(len(ans)); err != nil {
			return err
		}
		party, err = data.GetCurrentParty()
		if err != nil {
			return err
		}

		for i, addr := range ans.Slice() {
			p := party.Products[i]
			p.Addr = modbus.Addr(addr)
			if err := data.UpdateProduct(p); err != nil {
				return err
			}
		}
		go func() {
			gui.NotifyCurrentPartyChanged()
			gui.NotifyStatus(gui.Status{
				Text: fmt.Sprintf("—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏: —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è %d. –û—Ç–≤–µ—Ç–∏–ª–∏ [%s], –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ [%s]",
					party.PartyID, ans.Format(), notAns.Format()),
				Ok:         true,
				PopupLevel: gui.LWarn,
			})
		}()

		return nil
	})
}

func pause(chDone <-chan struct{}, d time.Duration) {
	timer := time.NewTimer(d)
	for {
		select {
		case <-timer.C:
			return
		case <-chDone:
			timer.Stop()
			return
		}
	}
}
